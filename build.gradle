buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        if (rootProject.hasProperty('haulmontRepoUrl')) {
            maven {
                url rootProject['haulmontRepoUrl']

                if (rootProject.hasProperty('haulmontRepoUser') && rootProject.hasProperty('haulmontRepoPassword')) {
                    credentials {
                        username rootProject['haulmontRepoUser']
                        password rootProject['haulmontRepoPassword']
                    }
                }
            }
        } else {
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.7.1")
    }
}

//plugins {
//	id 'org.springframework.boot' version '2.1.2.RELEASE' apply false
//}

ext {
    jmixVersion = '0.0.1'
    spockVersion = '1.2-groovy-2.5'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

allprojects {
    repositories {
        if (rootProject.hasProperty('haulmontRepoUrl')) {
            maven {
                url rootProject['haulmontRepoUrl']

                if (rootProject.hasProperty('haulmontRepoUser') && rootProject.hasProperty('haulmontRepoPassword')) {
                    credentials {
                        username rootProject['haulmontRepoUser']
                        password rootProject['haulmontRepoPassword']
                    }
                }
            }
        } else {
            jcenter()
            maven { url "https://dl.bintray.com/cuba-platform/main" }
        }
    }
}

configure([project(':jmix-core'), project(':jmix-data'), project(':jmix-security'), project(':jmix-remoting')]) {
    if (rootProject.hasProperty('spotbugsEnabled')) {
        apply plugin: 'com.github.spotbugs'

        project.afterEvaluate {
            spotbugs {
                toolVersion = '3.1.12'
                ignoreFailures = true
                omitVisitors = ['FindDoubleCheck']
                excludeFilter = rootProject.file("codestyle/exclude-filter.xml")
                effort = "max"
                reportLevel = "medium"
            }

            spotbugsMain {
                jvmArgs '-Xmx1024m'

                reports {
                    xml.enabled = false
                    html {
                        enabled = true
                        stylesheet = rootProject.resources.text.fromFile('codestyle/fancy-hist.xsl')
                        destination file("${project.buildDir}/reports/spotbugs/${project.name}.html")
                    }
                }
            }

            spotbugsTest {
                jvmArgs '-Xmx1024m'

                reports {
                    xml.enabled = false
                    html {
                        enabled = true
                        stylesheet = project.resources.text.fromFile('codestyle/fancy-hist.xsl')
                        destination file("${project.buildDir}/reports/spotbugs/test-${project.name}.html")
                    }
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Javadoc) {
        options.addStringOption("sourcepath", "")
        options.encoding = 'UTF-8'
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        destinationDir = file("$buildDir/docs/javadoc")

        title = "${project.name.toUpperCase()} ${project.version.replace('-SNAPSHOT','')} API"
    }
}