apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'io.spring.dependency-management'

if (project.hasProperty('spotbugsEnabled')) {
    apply plugin: 'com.github.spotbugs'
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = jmixVersion

def spockVersion = '1.2-groovy-2.5'

dependencies {
    implementation 'org.springframework:spring-context'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.codehaus.groovy:groovy'
    implementation 'org.apache.commons:commons-pool2'
    implementation 'javax.validation:validation-api'
    implementation 'org.hibernate.validator:hibernate-validator'

    api 'javax.inject:javax.inject:1'
    implementation 'org.apache.commons:commons-collections4:4.2'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.apache.commons:commons-text:1.6'
    implementation 'com.google.guava:guava:27.0.1-jre'
    implementation 'org.dom4j:dom4j:2.1.1'
    implementation 'org.eclipse.persistence:javax.persistence:2.1.1'
    implementation 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.3-1-cuba'

    testImplementation 'org.springframework:spring-test'
    testImplementation "org.spockframework:spock-core:$spockVersion"
    testImplementation "org.spockframework:spock-spring:$spockVersion"
    testRuntimeOnly 'org.slf4j:slf4j-simple'
}

if (project.hasProperty('spotbugsEnabled')) {
    spotbugs {
        toolVersion = '3.1.12'
        ignoreFailures = false
        omitVisitors = ['FindDoubleCheck']
        excludeFilter = project.file("codestyle/exclude-filter.xml")
        effort = "max"
        reportLevel = "medium"
    }

    spotbugsMain {
        jvmArgs '-Xmx1024m'

        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = project.resources.text.fromFile('codestyle/fancy-hist.xsl')
                destination file("${project.buildDir}/reports/spotbugs/${project.name}.html")
            }
        }
    }

    spotbugsTest {
        jvmArgs '-Xmx1024m'

        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = project.resources.text.fromFile('codestyle/fancy-hist.xsl')
                destination file("${project.buildDir}/reports/spotbugs/test-${project.name}.html")
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.deprecation = false
    options.compilerArgs += ["-Xlint:unchecked", "-Xlint:-deprecation", "-Werror"]
}

javadoc {
    options.addStringOption("sourcepath", "")
    options.encoding = 'UTF-8'
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    destinationDir = file("$buildDir/docs/javadoc")

    title = "${project.name.toUpperCase()} ${project.version.replace('-SNAPSHOT','')} API"
}